毕业设计项目文档


课题名称

基于 NATS 的去中心化加密聊天系统


================================================================================

课题简介

================================================================================


一、研究背景

传统的即时通讯应用普遍采用中心化服务器架构，存在以下问题：

1. 单点故障风险：中心服务器故障将导致整个系统瘫痪

2. 隐私安全隐患：用户数据集中存储，易受攻击和监控

3. 扩展性受限：服务器容量限制了用户规模和性能

4. 数据主权问题：用户数据由服务提供商控制


本课题旨在设计并实现一个真正去中心化的端到端加密聊天系统，解决传统架构的固有缺陷。


二、技术方案

本系统基于 NATS 消息中间件构建去中心化网络，采用以下核心技术：

1. 去中心化网络架构
   基于 NATS Routes 集群实现节点间对等通信，无中央服务器，每个节点平等参与消息路由，支持动态加入退出和自动容错。

2. 端到端加密通信
   私聊采用 NaCl Box 算法（X25519 密钥交换 + XSalsa20-Poly1305 加密），群聊采用 AES-256-GCM 对称加密，基于 NSC + JWT 的身份认证机制。

3. 密钥和配置持久化
   使用 JetStream KV 存储好友公钥和群组密钥，采用懒加载策略按需查询，结合内存缓存提升访问速度。

4. 跨平台桌面客户端
   基于 Wails v2 框架（Go 后端 + React 前端），支持 Windows/macOS/Linux 多平台，提供现代化用户界面。


三、主要特点

1. 去中心化网络：基于 NATS Routes 实现节点间对等通信，无中央服务器依赖

2. 端到端加密：私聊和群聊消息在客户端加密，采用标准加密算法

3. 混合网络拓扑：支持公网引导节点与局域网节点混合组网

4. 密钥持久化：通过 JetStream KV 存储密钥，应用重启后自动恢复

5. 模块化设计：清晰的代码结构，便于维护和扩展


四、应用价值

1. 企业内网通讯：私有化部署，数据不出内网

2. 安全敏感场景：政府、金融等对隐私要求高的领域

3. 开源社区贡献：提供可信的去中心化通信基础设施

4. 学术研究参考：分布式系统和密码学的实践案例


================================================================================

课题要求

================================================================================


一、基本功能要求

1. 用户身份管理
   实现用户唯一标识和昵称设置
   支持密钥对生成（Curve25519 公私钥）
   用户配置本地持久化存储

2. 加密通信功能
   实现私聊端到端加密（NaCl Box 算法）
   实现群聊对称加密（AES-256-GCM）
   支持好友公钥和群组密钥管理

3. 消息收发功能
   支持实时消息发送和接收
   支持私聊和群聊两种模式
   消息加密传输和正确解密显示

4. 去中心化网络
   基于 NATS Routes 实现节点组网
   支持至少 2 个节点互联通信
   节点间消息正确路由和传递

5. 用户界面
   提供基本的聊天界面
   显示会话列表和消息记录
   提供密钥管理和设置功能


二、技术实现要求

1. 后端开发
   使用 Go 语言开发（版本 1.21 以上）
   嵌入式运行 NATS Server 实现节点通信
   使用 JetStream KV 实现密钥持久化
   代码结构清晰，模块化设计

2. 前端开发
   使用 React 框架开发用户界面
   通过 Wails v2 实现前后端集成
   界面简洁友好，操作流畅

3. 加密实现
   使用 Go 标准加密库（crypto/rand、golang.org/x/crypto/nacl）
   私钥文件权限设置为 0600，防止未授权访问
   采用随机 nonce 机制防止重放攻击

4. 网络配置
   配置 NATS Routes 集群（客户端端口 4222，集群端口 6222）
   支持种子节点（seed routes）配置实现节点发现
   实现连接状态监控和自动重连机制


三、性能和安全要求

1. 性能指标
   应用启动时间小于 5 秒（懒加载优化后约 2-3 秒）
   消息发送延迟小于 100 毫秒（局域网环境）
   支持至少 10 个节点同时在线通信

2. 安全要求
   采用 NaCl Box 和 AES-256-GCM 加密算法
   密钥长度 256 位（Curve25519 公钥 32 字节，AES 密钥 32 字节）
   私钥文件权限 0600，配置文件存储在用户目录 ~/.dchat/

3. 可靠性要求
   NATS 发布订阅模式保证消息传递
   密钥通过 JetStream KV 自动持久化
   错误情况通过事件回调（OnError）向用户提示


四、文档要求

1. 系统设计文档
   整体架构设计（前后端分层、模块划分）
   核心模块说明（chat、nats、config、routes、nscsetup）
   加密算法技术说明（NaCl Box、AES-GCM）
   NATS 消息主题结构（dchat.dm.{cid}.msg、dchat.grp.{gid}.msg）

2. 使用说明文档
   开发环境配置（Go 1.21+、Node.js 18+、Wails CLI）
   应用构建命令（wails dev、wails build）
   网络配置示例（种子节点、引导节点配置）
   常见问题排除（连接问题、密钥问题、调试方法）

3. 测试文档
   功能测试用例（单节点启动、双节点连接、加密通信、群聊功能）
   完成至少 2 个节点的 Routes 连接测试
   记录测试过程、结果和截图
   网络容错和密钥持久化验证


五、验收标准

1. 基础功能验收
   应用能够正常启动运行
   用户能够设置昵称和生成密钥
   支持私聊和群聊功能
   消息能够正确加密和解密

2. 网络功能验收
   至少 2 个节点能够成功组网
   节点间消息能够正确传递
   支持节点动态加入网络

3. 安全性验收
   私聊消息实现端到端加密
   群聊消息实现对称加密
   密钥持久化和恢复正常工作

4. 跨平台验收
   至少在 Windows 或 Linux 平台编译成功
   应用在目标平台正常运行
   基本功能测试通过


六、项目成果

1. 软件成果
   可执行的桌面应用程序
   完整的项目源代码
   配置文件和使用示例

2. 文档成果
   系统设计文档
   用户使用手册
   测试报告

3. 演示要求
   能够演示基本的聊天功能
   能够演示去中心化网络特性
   能够演示加密通信过程


================================================================================

研究重点

================================================================================


一、去中心化网络架构研究

1. NATS Routes 集群机制
   深入研究 NATS Routes 的工作原理和配置方法
   理解节点间对等通信和消息路由机制
   掌握集群的动态扩展和容错能力

2. 节点发现与连接
   研究节点自动发现算法
   实现引导节点机制支持公网环境
   优化节点连接和断线重连策略


二、端到端加密技术研究

1. 非对称加密应用
   研究 NaCl Box 加密算法原理
   掌握 X25519 密钥交换协议
   实现私聊消息的端到端加密

2. 对称加密应用
   研究 AES-256-GCM 加密模式
   设计群聊密钥分发机制
   确保加密强度和性能平衡

3. 密钥管理策略
   研究密钥生成、存储和交换方法
   实现密钥持久化和自动恢复
   防范密钥泄露和滥用风险


三、分布式消息系统研究

1. 发布订阅模式
   理解 NATS 发布订阅机制
   设计合理的消息主题结构
   优化消息传递效率

2. 消息持久化
   研究 JetStream KV 的键值存储机制
   实现好友公钥和群组密钥的持久化
   优化查询性能（懒加载 + 内存缓存）


四、跨平台应用开发研究

1. Wails 框架应用
   掌握 Wails v2 框架使用方法
   实现 Go 后端与 React 前端集成
   优化应用启动速度和运行性能

2. 用户界面设计
   研究现代化聊天界面设计规范
   实现友好的用户交互体验
   适配不同操作系统的显示特性


================================================================================

计划进度

================================================================================


第一阶段：需求分析与架构设计（第 1-2 周）

1. 完成需求调研和文献阅读
   阅读 NATS 官方文档和相关论文
   研究现有去中心化通信系统案例
   明确系统功能需求和技术路线

2. 完成系统架构设计
   设计整体系统架构图（前后端模块、网络拓扑）
   确定技术栈（Go + NATS + Wails + React）
   制定详细的开发计划和时间表


第二阶段：核心功能开发（第 3-8 周）

1. 搭建基础框架（第 3-4 周）
   配置开发环境（Go、Node.js、Wails CLI）
   创建项目结构（internal 模块、frontend 目录）
   集成嵌入式 NATS Server 和 Wails 框架
   实现基本的前后端 API 绑定

2. 实现加密通信（第 5-6 周）
   实现 Curve25519 密钥对生成
   实现私聊 NaCl Box 加密解密功能
   实现群聊 AES-256-GCM 加密解密功能
   集成 JetStream KV 存储密钥

3. 实现去中心化网络（第 7-8 周）
   配置 NATS Routes 集群（端口 4222 和 6222）
   实现种子节点连接和节点发现机制
   实现 NSC + JWT 身份认证
   测试多节点消息路由和传递


第三阶段：功能完善与优化（第 9-11 周）

1. 完善用户界面（第 9 周）
   开发聊天界面和会话列表组件
   实现密钥管理和用户设置界面
   实现消息实时显示和事件回调
   优化用户交互体验

2. 功能测试与调试（第 10 周）
   进行单元测试和集成测试
   修复发现的 Bug 和问题
   优化系统性能和稳定性

3. 跨平台适配（第 11 周）
   使用 wails build 在 Windows 和 Linux 平台构建
   测试不同平台的功能兼容性
   配置防火墙规则（端口 4222 和 6222）
   完成应用打包和部署测试


第四阶段：文档编写与答辩准备（第 12-14 周）

1. 编写项目文档（第 12-13 周）
   撰写系统设计文档（INTERFACE_DOCS.md）
   编写用户使用手册（README.md）
   编写测试指南（TESTING_GUIDE.md）
   整理代码注释和 API 文档

2. 准备毕业答辩（第 14 周）
   制作答辩 PPT
   准备演示环境和案例
   总结项目经验和不足


================================================================================

主要参考文献

================================================================================


一、NATS 相关文献

1. NATS Official Documentation
   https://docs.nats.io/
   NATS 官方文档，涵盖基础概念、集群配置、JetStream 等核心内容


二、开发框架相关文献

1. Wails Documentation
   https://wails.io/docs/introduction
   Wails 框架官方文档，介绍框架使用方法和最佳实践

2. Go Programming Language Documentation
   https://go.dev/doc/
   Go 语言官方文档，包含语法、标准库和并发编程指南

3. React Documentation
   https://react.dev/
   React 框架官方文档，前端开发的核心参考资料


================================================================================

备注

本课题重点在于理解和实现去中心化通信系统的基本原理，掌握端到端加密技术的应用。

要求学生具备基本的网络编程和密码学知识，在导师指导下循序渐进完成各项任务。

建议采用迭代开发方式，先实现核心功能，再逐步完善和优化。

开发过程中及时记录技术决策和遇到的问题，为撰写文档积累素材。
